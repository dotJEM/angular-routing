{
    "project": {
        "name": "angular-routing",
        "description": "State-based routing and view management for AngularJS",
        "version": "0.3.2",
        "url": ""
    },
    "files": {
        "build\\src\\directives\\jemAnchor.js": {
            "name": "build\\src\\directives\\jemAnchor.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build\\src\\directives\\jemView.js": {
            "name": "build\\src\\directives\\jemView.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build\\src\\common.js": {
            "name": "build\\src\\common.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build\\src\\route.js": {
            "name": "build\\src\\route.js",
            "modules": {},
            "classes": {
                "$RouteProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "build\\src\\scroll.js": {
            "name": "build\\src\\scroll.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "build\\src\\view.js": {
            "name": "build\\src\\view.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "$RouteProvider": {
            "name": "$RouteProvider",
            "shortname": "$RouteProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "build\\src\\route.js",
            "line": 5,
            "description": "Used for configuring routes. See {@link dotjem.routing.$route $route} for an example.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "build\\src\\directives\\jemAnchor.js",
            "line": 5,
            "ngdoc": "directive",
            "name": "dotjem.routing.directive:jemAnchor",
            "restrict": "ECA",
            "description": "",
            "element": "ANY",
            "params": [
                {
                    "name": "jemAnchor",
                    "description": "Identifier of the anchor",
                    "type": "String"
                }
            ],
            "scope": "",
            "example": [
                "\n<example module=\"ngViewExample\" deps=\"angular-route.js\" animations=\"true\">"
            ],
            "class": "$RouteProvider"
        },
        {
            "file": "build\\src\\directives\\jemView.js",
            "line": 1,
            "ngdoc": "directive",
            "name": "dotjem.routing.directive:jemView",
            "restrict": "ECA",
            "description": "",
            "element": "ANY",
            "params": [
                {
                    "name": "jemView",
                    "description": "Name of the view",
                    "type": "String"
                }
            ],
            "scope": "",
            "example": [
                "\n<example module=\"ngViewExample\" deps=\"angular-route.js\" animations=\"true\">"
            ],
            "class": "$RouteProvider"
        },
        {
            "file": "build\\src\\common.js",
            "line": 38,
            "description": "We need our custom method because encodeURIComponent is too aggressive and doesn't follow\nhttp://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\nsegments:\n   segment       = *pchar\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "class": "$RouteProvider"
        },
        {
            "file": "build\\src\\common.js",
            "line": 54,
            "description": "This method is intended for encoding *key* or *value* parts of query component. We need a custom\nmethod because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\nencoded per http://tools.ietf.org/html/rfc3986:\n   query       = *( pchar / \"/\" / \"?\" )\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "class": "$RouteProvider"
        },
        {
            "file": "build\\src\\route.js",
            "line": 18,
            "description": "Adds a new converter or overwrites an existing one.\n\nBy default the folowing converters are precent:\n - `` - default Converter, used on all parameters that doesn't specify a converter.\n   Matches any input.\n\n - `num` - number converter, used to only mach numeric values.\n\n - `regex` - regular expressions converter, used to match a parameter agains a regular\n   expression.",
            "itemtype": "method",
            "name": "convert",
            "return": {
                "description": "self",
                "type": "Object"
            },
            "params": [
                {
                    "name": "name",
                    "description": "Cerverter name, used in the path when registering routes through the\n  {@link dotjem.routing.routeProvider#when when} function.",
                    "type": "String"
                }
            ],
            "class": "$RouteProvider"
        },
        {
            "file": "build\\src\\route.js",
            "line": 41,
            "description": "Adds a new route definition to the `$route` service.",
            "itemtype": "method",
            "name": "when",
            "return": {
                "description": "self",
                "type": "Object"
            },
            "params": [
                {
                    "name": "path",
                    "description": "Route path (matched against `$location.path`). If `$location.path`\n   contains redundant trailing slash or is missing one, the route will still match.\n\n   `path` can contain named groups starting with a colon (`:name`) or curly brackets (`{name}`).\n   All characters up to the next slash are matched and stored in `$routeParams` under the\n   given `name` when the route matches.\n\n   Further, when using the curly bracket syntax, converters can be used to match only specific\n   values, (`{num:name}`) will only match numerical values and (`{regex(\\d{1,2}[a-z]+):name}`)\n   would only match a parameter starting with one or two digits followed by a number of\n   characters between 'a' and 'z'.\n\n   More converters can be registered using the {@link dotjem.routing.routeProvider#convert convert}\n   function.",
                    "type": "String"
                },
                {
                    "name": "route",
                    "description": "Mapping information to be assigned to `$route.current` on route\n   match.\n\n   Object properties:\n\n   - `state` � `{string}` � a state that should be activated when the route is matched.\n   - `action` � `{(string|function()=}` � an action that should be performed when the route is matched.\n\n   Legacy support for the following when using the {@link dotjem.routing.legacy dotjem.routing.legacy}\n   module.\n\n   - `controller` � `{(string|function()=}` � Controller fn that should be associated with newly\n     created scope or the name of a {@link angular.Module#controller registered controller}\n     if passed as a string.\n   - `template` � `{string=|function()=}` � html template as a string or function that returns\n     an html template as a string which should be used by {@link ng.directive:ngView ngView} or\n     {@link ng.directive:ngInclude ngInclude} directives.\n     This property takes precedence over `templateUrl`.\n\n     If `template` is a function, it will be called with the following parameters:\n\n     - `{Array.<Object>}` - route parameters extracted from the current\n       `$location.path()` by applying the current route\n\n   - `templateUrl` � `{string=|function()=}` � path or function that returns a path to an html\n     template that should be used by {@link ng.directive:ngView ngView}.\n\n     If `templateUrl` is a function, it will be called with the following parameters:\n\n     - `{Array.<Object>}` - route parameters extracted from the current\n       `$location.path()` by applying the current route\n\n   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n     be injected into the controller. If any of these dependencies are promises, they will be\n     resolved and converted to a value before the controller is instantiated and the\n     `$routeChangeSuccess` event is fired. The map object is:\n\n     - `key` � `{string}`: a name of a dependency to be injected into the controller.\n     - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n       Otherwise if function, then it is {@link api/AUTO.$injector#invoke injected}\n       and the return value is treated as the dependency. If the result is a promise, it is resolved\n       before its value is injected into the controller.\n\n   - `redirectTo` � {(string|function())=} � value to update\n     {@link ng.$location $location} path with and trigger route redirection.\n\n     If `redirectTo` is a function, it will be called with the following parameters:\n\n     - `{Object.<string>}` - route parameters extracted from the current\n       `$location.path()` by applying the current route templateUrl.\n     - `{string}` - current `$location.path()`\n     - `{Object}` - current `$location.search()`\n\n     The custom `redirectTo` function is expected to return a string which will be used\n     to update `$location.path()` and `$location.search()`.\n\n   - `[reloadOnSearch=true]` - {boolean=} - reload route when only $location.search()\n   changes.\n\n     If the option is set to `false` and url in the browser changes, then\n     `$routeUpdate` event is broadcasted on the root scope.",
                    "type": "Object"
                }
            ],
            "class": "$RouteProvider"
        },
        {
            "file": "build\\src\\route.js",
            "line": 149,
            "description": "Sets route definition that will be used on route change when no other route definition\nis matched.",
            "itemtype": "method",
            "name": "otherwise",
            "return": {
                "description": "self",
                "type": "Object"
            },
            "params": [
                {
                    "name": "params",
                    "description": "Mapping information to be assigned to `$route.current`.",
                    "type": "Object"
                }
            ],
            "class": "$RouteProvider"
        },
        {
            "file": "build\\src\\scroll.js",
            "line": 4,
            "ngdoc": "function",
            "name": "dotjem.routing.$scrollProvider",
            "requires": [
                "$window",
                "$location",
                "$rootScope"
            ],
            "description": "",
            "class": ""
        },
        {
            "file": "build\\src\\scroll.js",
            "line": 60,
            "description": "scrollTo: top - scroll to top, explicitly stated.\n          (This also enables one to override another scrollTo from a parent)\nscrollTo: null - don't scroll, not even to top.\nscrollTo: element-selector - scroll to an element id\nscrollTo: ['$stateParams', function($stateParams) { return stateParams.section; }\n          - scroll to element with id or view if starts with @",
            "class": ""
        },
        {
            "file": "build\\src\\view.js",
            "line": 6,
            "ngdoc": "object",
            "name": "dotjem.routing.$view",
            "description": "",
            "class": ""
        },
        {
            "file": "build\\src\\view.js",
            "line": 35,
            "ngdoc": "method",
            "name": "dotjem.$view#clear",
            "methodof": "dotjem.routing.$view",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the view to clear (optional)",
                    "type": "String"
                }
            ],
            "description": "Clears a view, or all views if no name is provided.",
            "class": ""
        },
        {
            "file": "build\\src\\view.js",
            "line": 68,
            "ngdoc": "method",
            "name": "dotjem.$view#setOrUpdate",
            "methodof": "dotjem.routing.$view",
            "params": [
                {
                    "name": "name",
                    "description": "Name",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Arguments",
                    "type": "Object"
                }
            ],
            "description": "",
            "class": ""
        },
        {
            "file": "build\\src\\view.js",
            "line": 79,
            "ngdoc": "method",
            "name": "dotjem.$view#setOrUpdate",
            "methodof": "dotjem.routing.$view",
            "params": [
                {
                    "name": "name",
                    "description": "Name",
                    "type": "String"
                },
                {
                    "name": "template",
                    "description": "Template",
                    "type": "Object"
                },
                {
                    "name": "controller",
                    "description": "Controller",
                    "type": "Function="
                },
                {
                    "name": "locals",
                    "description": "Locals",
                    "type": "Object="
                },
                {
                    "name": "sticky",
                    "description": "Sticky flag",
                    "type": "String="
                }
            ],
            "description": "",
            "class": ""
        },
        {
            "file": "build\\src\\view.js",
            "line": 131,
            "ngdoc": "method",
            "name": "dotjem.$view#setIfAbsent",
            "methodof": "dotjem.routing.$view",
            "params": [
                {
                    "name": "name",
                    "description": "Name",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Arguments",
                    "type": "Object"
                }
            ],
            "description": "",
            "class": ""
        },
        {
            "file": "build\\src\\view.js",
            "line": 142,
            "ngdoc": "method",
            "name": "dotjem.$view#setIfAbsent",
            "methodof": "dotjem.routing.$view",
            "params": [
                {
                    "name": "name",
                    "description": "Name",
                    "type": "String"
                },
                {
                    "name": "template",
                    "description": "Template",
                    "type": "Object"
                },
                {
                    "name": "controller",
                    "description": "Controller",
                    "type": "Function="
                },
                {
                    "name": "locals",
                    "description": "Locals",
                    "type": "Object="
                }
            ],
            "description": "",
            "class": ""
        },
        {
            "file": "build\\src\\view.js",
            "line": 186,
            "ngdoc": "method",
            "name": "dotjem.$view#get",
            "methodof": "dotjem.routing.$view",
            "params": [
                {
                    "name": "name",
                    "description": "Name",
                    "type": "String"
                }
            ],
            "description": "",
            "class": ""
        },
        {
            "file": "build\\src\\view.js",
            "line": 205,
            "ngdoc": "method",
            "name": "dotjem.$view#refresh",
            "methodof": "dotjem.routing.$view",
            "params": [
                {
                    "name": "name",
                    "description": "Name",
                    "type": "String="
                },
                {
                    "name": "data",
                    "description": "Data",
                    "type": "Object="
                }
            ],
            "description": "",
            "class": ""
        },
        {
            "file": "build\\src\\view.js",
            "line": 234,
            "ngdoc": "method",
            "name": "dotjem.$view#beginUpdate",
            "methodof": "dotjem.routing.$view",
            "params": [
                {
                    "name": "name",
                    "description": "Name",
                    "type": "String"
                }
            ],
            "description": "",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: ngdoc",
            "line": " build\\src\\directives\\jemAnchor.js:5"
        },
        {
            "message": "unknown tag: name",
            "line": " build\\src\\directives\\jemAnchor.js:5"
        },
        {
            "message": "unknown tag: restrict",
            "line": " build\\src\\directives\\jemAnchor.js:5"
        },
        {
            "message": "unknown tag: element",
            "line": " build\\src\\directives\\jemAnchor.js:5"
        },
        {
            "message": "unknown tag: scope",
            "line": " build\\src\\directives\\jemAnchor.js:5"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " build\\src\\directives\\jemView.js:1"
        },
        {
            "message": "unknown tag: name",
            "line": " build\\src\\directives\\jemView.js:1"
        },
        {
            "message": "unknown tag: restrict",
            "line": " build\\src\\directives\\jemView.js:1"
        },
        {
            "message": "unknown tag: element",
            "line": " build\\src\\directives\\jemView.js:1"
        },
        {
            "message": "unknown tag: scope",
            "line": " build\\src\\directives\\jemView.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " build\\src\\route.js:41"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " build\\src\\scroll.js:4"
        },
        {
            "message": "unknown tag: name",
            "line": " build\\src\\scroll.js:4"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " build\\src\\view.js:6"
        },
        {
            "message": "unknown tag: name",
            "line": " build\\src\\view.js:6"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " build\\src\\view.js:35"
        },
        {
            "message": "unknown tag: name",
            "line": " build\\src\\view.js:35"
        },
        {
            "message": "unknown tag: methodof",
            "line": " build\\src\\view.js:35"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " build\\src\\view.js:68"
        },
        {
            "message": "unknown tag: name",
            "line": " build\\src\\view.js:68"
        },
        {
            "message": "unknown tag: methodof",
            "line": " build\\src\\view.js:68"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " build\\src\\view.js:79"
        },
        {
            "message": "unknown tag: name",
            "line": " build\\src\\view.js:79"
        },
        {
            "message": "unknown tag: methodof",
            "line": " build\\src\\view.js:79"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " build\\src\\view.js:131"
        },
        {
            "message": "unknown tag: name",
            "line": " build\\src\\view.js:131"
        },
        {
            "message": "unknown tag: methodof",
            "line": " build\\src\\view.js:131"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " build\\src\\view.js:142"
        },
        {
            "message": "unknown tag: name",
            "line": " build\\src\\view.js:142"
        },
        {
            "message": "unknown tag: methodof",
            "line": " build\\src\\view.js:142"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " build\\src\\view.js:186"
        },
        {
            "message": "unknown tag: name",
            "line": " build\\src\\view.js:186"
        },
        {
            "message": "unknown tag: methodof",
            "line": " build\\src\\view.js:186"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " build\\src\\view.js:205"
        },
        {
            "message": "unknown tag: name",
            "line": " build\\src\\view.js:205"
        },
        {
            "message": "unknown tag: methodof",
            "line": " build\\src\\view.js:205"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " build\\src\\view.js:234"
        },
        {
            "message": "unknown tag: name",
            "line": " build\\src\\view.js:234"
        },
        {
            "message": "unknown tag: methodof",
            "line": " build\\src\\view.js:234"
        },
        {
            "message": "Missing item type",
            "line": " build\\src\\directives\\jemAnchor.js:5"
        },
        {
            "message": "Missing item type",
            "line": " build\\src\\directives\\jemView.js:1"
        },
        {
            "message": "Missing item type\nWe need our custom method because encodeURIComponent is too aggressive and doesn't follow\nhttp://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\nsegments:\n   segment       = *pchar\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "line": " build\\src\\common.js:38"
        },
        {
            "message": "Missing item type\nThis method is intended for encoding *key* or *value* parts of query component. We need a custom\nmethod because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\nencoded per http://tools.ietf.org/html/rfc3986:\n   query       = *( pchar / \"/\" / \"?\" )\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "line": " build\\src\\common.js:54"
        },
        {
            "message": "Missing item type",
            "line": " build\\src\\scroll.js:4"
        },
        {
            "message": "Missing item type\nscrollTo: top - scroll to top, explicitly stated.\n          (This also enables one to override another scrollTo from a parent)\nscrollTo: null - don't scroll, not even to top.\nscrollTo: element-selector - scroll to an element id\nscrollTo: ['$stateParams', function($stateParams) { return stateParams.section; }\n          - scroll to element with id or view if starts with @",
            "line": " build\\src\\scroll.js:60"
        },
        {
            "message": "Missing item type",
            "line": " build\\src\\view.js:6"
        },
        {
            "message": "Missing item type\nClears a view, or all views if no name is provided.",
            "line": " build\\src\\view.js:35"
        },
        {
            "message": "Missing item type",
            "line": " build\\src\\view.js:68"
        },
        {
            "message": "Missing item type",
            "line": " build\\src\\view.js:79"
        },
        {
            "message": "Missing item type",
            "line": " build\\src\\view.js:131"
        },
        {
            "message": "Missing item type",
            "line": " build\\src\\view.js:142"
        },
        {
            "message": "Missing item type",
            "line": " build\\src\\view.js:186"
        },
        {
            "message": "Missing item type",
            "line": " build\\src\\view.js:205"
        },
        {
            "message": "Missing item type",
            "line": " build\\src\\view.js:234"
        }
    ]
}